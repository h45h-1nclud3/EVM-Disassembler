import re
import sys

# Main purpose is to convert Opcodes (Machine codes) to EVM Assembly Instructions
opcodes_instructions = {
    "00" : "STOP",
    "01" : "ADD",
    "02" : "MUL",
    "03" : "SUB",
    "04" : "DIV",
    "05" : "SDIV",
    "06" : "MOD",
    "07" : "SMOD",
    "08" : "ADDMOD",
    "09" : "MULMOD",
    "0A" : "EXP",
    "0B" : "SIGNEXTEND",
    "0C" : "INVALID_INSTRUCTION",
    "0D" : "INVALID_INSTRUCTION",
    "0E" : "INVALID_INSTRUCTION",
    "0F" : "INVALID_INSTRUCTION",
    "10" : "LT",
    "11" : "GT",
    "12" : "SLT",
    "13" : "SGT",
    "14" : "EQ",
    "15" : "ISZERO",
    "16" : "AND",
    "17" : "OR",
    "18" : "XOR",
    "19" : "NOT",
    "1A" : "BYTE",
    "1B" : "SHL",
    "1C" : "SHR",
    "1D" : "SAR",
    "1E" : "INVALID_INSTRUCTION",
    "1F" : "INVALID_INSTRUCTION",
    "20" : "SHA3",
    "21" : "INVALID_INSTRUCTION",
    "22" : "INVALID_INSTRUCTION",
    "23" : "INVALID_INSTRUCTION",
    "24" : "INVALID_INSTRUCTION",
    "25" : "INVALID_INSTRUCTION",
    "26" : "INVALID_INSTRUCTION",
    "27" : "INVALID_INSTRUCTION",
    "28" : "INVALID_INSTRUCTION",
    "29" : "INVALID_INSTRUCTION",
    "2A" : "INVALID_INSTRUCTION",
    "2B" : "INVALID_INSTRUCTION",
    "2C" : "INVALID_INSTRUCTION",
    "2D" : "INVALID_INSTRUCTION",
    "2E" : "INVALID_INSTRUCTION",
    "2F" : "INVALID_INSTRUCTION",
    "30" : "ADDRESS",
    "31" : "BALANCE",
    "32" : "ORIGIN",
    "33" : "CALLER",
    "34" : "CALLVALUE",
    "35" : "CALLDATALOAD",
    "36" : "CALLDATASIZE",
    "37" : "CALLDATACOPY",
    "38" : "CODESIZE",
    "39" : "CODECOPY",
    "3A" : "GASPRICE",
    "3B" : "EXTCODESIZE",
    "3C" : "EXTCODECOPY",
    "3D" : "RETURNDATASIZE",
    "3E" : "RETURNDATACOPY",
    "3F" : "EXTCODEHASH",
    "40" : "BLOCKHASH",
    "41" : "COINBASE",
    "42" : "TIMESTAMP",
    "43" : "NUMBER",
    "44" : "DIFFICULTY",
    "45" : "GASLIMIT",
    "46" : "CHAINID",
    "47" : "SELFBALANCE",
    "48" : "BASEFEE",
    "49" : "INVALID_INSTRUCTION",
    "4A" : "INVALID_INSTRUCTION",
    "4B" : "INVALID_INSTRUCTION",
    "4C" : "INVALID_INSTRUCTION",
    "4D" : "INVALID_INSTRUCTION",
    "4E" : "INVALID_INSTRUCTION",
    "4F" : "INVALID_INSTRUCTION",
    "50" : "POP",
    "51" : "MLOAD",
    "52" : "MSTORE",
    "53" : "MSTORE8",
    "54" : "SLOAD",
    "55" : "SSTORE",
    "56" : "JUMP",
    "57" : "JUMPI",
    "58" : "PC",
    "59" : "MSIZE",
    "5A" : "GAS",
    "5B" : "JUMPDEST",
    "5C" : "INVALID_INSTRUCTION",
    "5D" : "INVALID_INSTRUCTION",
    "5E" : "INVALID_INSTRUCTION",
    "5F" : "PUSH0",
    "60" : "PUSH1",
    "61" : "PUSH2",
    "62" : "PUSH3",
    "63" : "PUSH4",
    "64" : "PUSH5",
    "65" : "PUSH6",
    "66" : "PUSH7",
    "67" : "PUSH8",
    "68" : "PUSH9",
    "69" : "PUSH10",
    "6A" : "PUSH11",
    "6B" : "PUSH12",
    "6C" : "PUSH13",
    "6D" : "PUSH14",
    "6E" : "PUSH15",
    "6F" : "PUSH16",
    "70" : "PUSH17",
    "71" : "PUSH18",
    "72" : "PUSH19",
    "73" : "PUSH20",
    "74" : "PUSH21",
    "75" : "PUSH22",
    "76" : "PUSH23",
    "77" : "PUSH24",
    "78" : "PUSH25",
    "79" : "PUSH26",
    "7A" : "PUSH27",
    "7B" : "PUSH28",
    "7C" : "PUSH29",
    "7D" : "PUSH30",
    "7E" : "PUSH31",
    "7F" : "PUSH32",
    "80" : "DUP1",
    "81" : "DUP2",
    "82" : "DUP3",
    "83" : "DUP4",
    "84" : "DUP5",
    "85" : "DUP6",
    "86" : "DUP7",
    "87" : "DUP8",
    "88" : "DUP9",
    "89" : "DUP10",
    "8A" : "DUP11",
    "8B" : "DUP12",
    "8C" : "DUP13",
    "8D" : "DUP14",
    "8E" : "DUP15",
    "8F" : "DUP16",
    "90" : "SWAP1",
    "91" : "SWAP2",
    "92" : "SWAP3",
    "93" : "SWAP4",
    "94" : "SWAP5",
    "95" : "SWAP6",
    "96" : "SWAP7",
    "97" : "SWAP8",
    "98" : "SWAP9",
    "99" : "SWAP10",
    "9A" : "SWAP11",
    "9B" : "SWAP12",
    "9C" : "SWAP13",
    "9D" : "SWAP14",
    "9E" : "SWAP15",
    "9F" : "SWAP16",
    "A0" : "LOG0",
    "A1" : "LOG1",
    "A2" : "LOG2",
    "A3" : "LOG3",
    "A4" : "LOG4",
    "A5" : "INVALID_INSTRUCTION",
    "A6" : "INVALID_INSTRUCTION",
    "A7" : "INVALID_INSTRUCTION",
    "A8" : "INVALID_INSTRUCTION",
    "A9" : "INVALID_INSTRUCTION",
    "AA" : "INVALID_INSTRUCTION",
    "AB" : "INVALID_INSTRUCTION",
    "AC" : "INVALID_INSTRUCTION",
    "AD" : "INVALID_INSTRUCTION",
    "AE" : "INVALID_INSTRUCTION",
    "AF" : "INVALID_INSTRUCTION",
    "B0" : "PUSH",
    "B1" : "DUP",
    "B2" : "SWAP",
    "B3" : "INVALID_INSTRUCTION",
    "B4" : "INVALID_INSTRUCTION",
    "B5" : "INVALID_INSTRUCTION",
    "B6" : "INVALID_INSTRUCTION",
    "B7" : "INVALID_INSTRUCTION",
    "B8" : "INVALID_INSTRUCTION",
    "B9" : "INVALID_INSTRUCTION",
    "BA" : "INVALID_INSTRUCTION",
    "BB" : "INVALID_INSTRUCTION",
    "BC" : "INVALID_INSTRUCTION",
    "BD" : "INVALID_INSTRUCTION",
    "BE" : "INVALID_INSTRUCTION",
    "BF" : "INVALID_INSTRUCTION",
    "C0" : "INVALID_INSTRUCTION",
    "C1" : "INVALID_INSTRUCTION",
    "C2" : "INVALID_INSTRUCTION",
    "C3" : "INVALID_INSTRUCTION",
    "C4" : "INVALID_INSTRUCTION",
    "C5" : "INVALID_INSTRUCTION",
    "C6" : "INVALID_INSTRUCTION",
    "C7" : "INVALID_INSTRUCTION",
    "C8" : "INVALID_INSTRUCTION",
    "C9" : "INVALID_INSTRUCTION",
    "CA" : "INVALID_INSTRUCTION",
    "CB" : "INVALID_INSTRUCTION",
    "CC" : "INVALID_INSTRUCTION",
    "CD" : "INVALID_INSTRUCTION",
    "CE" : "INVALID_INSTRUCTION",
    "CF" : "INVALID_INSTRUCTION",
    "D0" : "INVALID_INSTRUCTION",
    "D1" : "INVALID_INSTRUCTION",
    "D2" : "INVALID_INSTRUCTION",
    "D3" : "INVALID_INSTRUCTION",
    "D4" : "INVALID_INSTRUCTION",
    "D5" : "INVALID_INSTRUCTION",
    "D6" : "INVALID_INSTRUCTION",
    "D7" : "INVALID_INSTRUCTION",
    "D8" : "INVALID_INSTRUCTION",
    "D9" : "INVALID_INSTRUCTION",
    "DA" : "INVALID_INSTRUCTION",
    "DB" : "INVALID_INSTRUCTION",
    "DC" : "INVALID_INSTRUCTION",
    "DD" : "INVALID_INSTRUCTION",
    "DE" : "INVALID_INSTRUCTION",
    "DF" : "INVALID_INSTRUCTION",
    "E0" : "INVALID_INSTRUCTION",
    "E1" : "INVALID_INSTRUCTION",
    "E2" : "INVALID_INSTRUCTION",
    "E3" : "INVALID_INSTRUCTION",
    "E4" : "INVALID_INSTRUCTION",
    "E5" : "INVALID_INSTRUCTION",
    "E6" : "INVALID_INSTRUCTION",
    "E7" : "INVALID_INSTRUCTION",
    "E8" : "INVALID_INSTRUCTION",
    "E9" : "INVALID_INSTRUCTION",
    "EA" : "INVALID_INSTRUCTION",
    "EB" : "INVALID_INSTRUCTION",
    "EC" : "INVALID_INSTRUCTION",
    "ED" : "INVALID_INSTRUCTION",
    "EE" : "INVALID_INSTRUCTION",
    "EF" : "INVALID_INSTRUCTION",
    "F0" : "CREATE",
    "F1" : "CALL",
    "F2" : "CALLCODE",
    "F3" : "RETURN",
    "F4" : "DELEGATECALL",
    "F5" : "CREATE2",
    "F6" : "INVALID_INSTRUCTION",
    "F7" : "INVALID_INSTRUCTION",
    "F8" : "INVALID_INSTRUCTION",
    "F9" : "INVALID_INSTRUCTION",
    "FA" : "STATICCALL",
    "FB" : "INVALID_INSTRUCTION",
    "FC" : "INVALID_INSTRUCTION",
    "FD" : "REVERT",
    "FE" : "INVALID_INSTRUCTION",
    "FF" : "SELFDESTRUCT",

    
}

# give your opcodes as an argument for the script
contract_opcodes = sys.argv[1] #"60806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461014257806306fdde031461016b578063095ea7b3146101f557806317ffc320146102195"

def disasseble(contract_opcodes):
    program_counter = 0
    pat = re.compile(r"\d+")
    while program_counter < (len(contract_opcodes) // 2 ):
        
        opcode = contract_opcodes[program_counter*2] + contract_opcodes[(program_counter*2)+1]
        opcode = opcode.upper()
        digits_in_opcode = ''.join(re.findall(pat, opcodes_instructions[opcode]))
    
        if digits_in_opcode != "" and opcodes_instructions[opcode].startswith("PUSH") == True and opcodes_instructions[opcode].endswith("0") == False:
            # print instructions with values that are not opcodes
            print(f"{hex(program_counter)}: --> {opcodes_instructions[opcode]}" + " ---> 0x" + contract_opcodes[program_counter*2+2:(program_counter + int(digits_in_opcode))*2 +2])
            program_counter += int(digits_in_opcode) 
            
        else:
            # print instructions that don't have values
            print(f"{hex(program_counter)}: --> {opcodes_instructions[opcode]}"  )

        program_counter += 1
        
disasseble(contract_opcodes)